# Introduction to AnagramSorter application on MapReduce

## Workflow
To do this work, we designed two jobs in the workflow.
* job: cluster all words which are anagrams to each other into one record. Eg. AB, AC, BA to (AB, BA), AC
  * classses:
    * TokenizerMapper: read in each word, generate a bitmap talking about what and how many letters this word contain
      * eg. abda -> (a2b1d1, abda)  zac -> (a1c1z1, zac)
    * SameBitmapReducer: Merge words with same key(letter bitmap) into one 'line'
      * eg. (a2b1d1, abda), (a2b1d1, bdaa) -> ('', "abda bdaa") key as empty
* job2: sort those anagrams by descending order. Eg.  AC, (AB, BA) to (AB, BA), AC
  * classes:
    * ClusterMapper: read in each record generated by job, then count the number of words for each record
      * eg. ('', "abda bdaa") -> (2, "abda bdaa")
      * then, we also set the comparator to LongWritable.DecreasingComparator.class 
    * OutputMapper: delete the count, output to final file
      * to get global sorted, we set only one reducer at this step
      * eg. (2, "abda bdaa") -> ('', "abda bdaa")

## Code Directory
* AnagramSorter.java
* README.txt  this file

## How to Run
